openapi: 3.0.3
info:
  title: M Social - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:4000
tags:
  - name: auth
    description: Access to M Social
  - name: user
    description: Everything about your Users
paths:
  /users/login:
    post:
      tags:
        - auth
      summary: Login
      description: Login M Social
      operationId: login
      requestBody:
        description: Information to login
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: hongson2892000@gmail.com
                password:
                  type: string
                  example: hongson2992000@S
        required: true
      responses:
        '200':
          description: Login Successfully !
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login Successfully
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjVmZTQwN2NhMGRjOTg3YmRiZjFkZDg2IiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE3MjI3MzcyNTcsImV4cCI6MTcyMjczODE1N30.fCY94p5lXiz8E8XYIBBzi1S0ravXt1Dspwd6tygBgDY
                      refresh_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjVmZTQwN2NhMGRjOTg3YmRiZjFkZDg2IiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE3MjI3MzcyNTcsImV4cCI6MTcyMjczODE1N30.fCY94p5lXiz8E8XYIBBzi1S0ravXt1Dspwd6tygBgDY
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /users/me:
    get:
      tags:
        - user
      summary: Get profile
      description: Returns profile of me
      responses:
        '200':
          description: Get my profile successfully !
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Get my profile successfully !
                  data:
                    $ref: '#/components/schemas/User'
      security:
        - BearerAuth: []
components:
  schemas:
    Authentication:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjVmZTQwN2NhMGRjOTg3YmRiZjFkZDg2IiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE3MjI3MzcyNTcsImV4cCI6MTcyMjczODE1N30.fCY94p5lXiz8E8XYIBBzi1S0ravXt1Dspwd6tygBgDY
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjVmZTQwN2NhMGRjOTg3YmRiZjFkZDg2IiwidG9rZW5fdHlwZSI6MCwidmVyaWZ5IjoxLCJpYXQiOjE3MjI3MzcyNTcsImV4cCI6MTcyMjczODE1N30.fCY94p5lXiz8E8XYIBBzi1S0ravXt1Dspwd6tygBgDY
    User:
      type: object
      properties:
        _id:
          type: string
          format: MongoId
          example: 65fe407ca0dc987bdbf1dd86
        name:
          type: string
          example: Dao Hong Son
        email:
          type: string
          example: admin@gmail.com
        date_of_birth:
          type: string
          format: ISO8601
          example: 2024-03-16T08:26:33.781Z
        created_at:
          type: string
          format: ISO8601
          example: 2024-03-16T08:26:33.781Z
        updated_at:
          type: string
          format: ISO8601
          example: 2024-03-16T08:26:33.781Z
        verify:
          $ref: '#/components/schemas/UserVerifyStatus'
        twitter_circle:
          type: array
          items:
            type: string
            format: MongoId
          example: ['65fe407ca0dc987bdbf1dd86']
        bio:
          type: string
          example: 'This is my bio'
        location:
          type: string
          example: 'HCM City'
        website:
          type: string
          example: http://swagger.io
        username:
          type: string
          example: hongson2992000
        avatar:
          type: string
          example: http://swagger.io
        cover_photo:
          type: string
          example: http://swagger.io
    UserVerifyStatus:
      type: number
      enum: [Unverified, Verified, Banned]
      example: 1
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
